{"version":3,"sources":["logo.svg","components/home/TTWord.js","components/onion-connisseur/ExplainButton.js","components/onion-connisseur/OnionConnoisseur.js","components/home/AboutStack.js","components/home/HomeDivider.js","components/home/IntroStack.js","components/projects/Project.js","components/home/ProjectsStack.js","components/home/Home.js","components/navbar/MobileDrawer.js","components/navbar/NavbarContainer.js","components/navbar/MobileNavbar.js","components/navbar/LargerNavbar.js","components/generic/DOMLink.js","components/projects/Projects.js","components/footer/Footer.js","components/generic/ScrollToTop.js","App.js","reportWebVitals.js","theme.js","index.js"],"names":["TTWord","props","label","as","color","children","ExplainButton","size","QuestionOutline","OnionConnoisseur","useColorMode","colorMode","toggleColorMode","useState","enteredArticle","setEnteredArticle","loading","setLoading","result","setResult","error","setError","spacing","align","ml","placeholder","w","onChange","e","target","value","minHeight","justify","onClick","formData","FormData","append","axios","post","then","res","console","log","data","catch","isLoading","loadingText","AboutStackInner","ref","py","flexDirection","borderWidth","borderColor","p","direction","borderRadius","shadow","textAlign","src","AboutStack","forwardRef","HomeDivider","IntroStack","h","pt","scrollTo","Project","useCycle","open","toggleOpen","variant","title","maxH","in","startingHeight","ProjectsStack","columns","gap","to","colo","isExternal","href","Home","useRef","current","scrollIntoView","behavior","NavbarLink","pb","borderBottomWidth","borderBlockEndColor","fontSize","display","MobileDrawer","isOpen","onClose","placement","alignItems","htmlFor","mb","id","isChecked","NavbarContainer","position","top","bg","zIndex","MobileNavbar","useDisclosure","onOpen","Hamburger","LargerNavbar","Moon","DOMLink","Projects","Footer","Email","ScrollToTop","pathname","useLocation","useEffect","window","Fragment","App","mobileNav","useMediaQuery","query","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","components","Link","baseStyle","smoothscroll","polyfill","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bda3f4e1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Text } from '@chakra-ui/layout'\r\nimport { Tooltip } from '@chakra-ui/tooltip'\r\nimport React from 'react'\r\n\r\nexport default function TTWord(props) {\r\n    return (\r\n        <Tooltip label={props.label}><Text as='b' color='red.500'>{props.children}</Text></Tooltip>\r\n    )\r\n}\r\n","import { IconButton } from '@chakra-ui/button'\r\nimport { QuestionOutlineIcon } from '@chakra-ui/icons'\r\nimport { Text } from '@chakra-ui/layout'\r\nimport { Popover, PopoverArrow, PopoverBody, PopoverCloseButton, PopoverContent, PopoverHeader, PopoverTrigger } from '@chakra-ui/popover'\r\nimport React from 'react'\r\nimport TTWord from '../home/TTWord'\r\n\r\nexport default function ExplainButton() {\r\n    return (\r\n        <Popover>\r\n            <PopoverTrigger>\r\n                <IconButton size='small'><QuestionOutlineIcon /></IconButton>\r\n            </PopoverTrigger>\r\n            <PopoverContent>\r\n                <PopoverArrow />\r\n                <PopoverCloseButton />\r\n                <PopoverHeader as='b'>\r\n                    What is this?\r\n                </PopoverHeader>\r\n                <PopoverBody>\r\n                    <Text>This is a fun little program I created with my friend for our final project in SI 206 at the University of Michigan.</Text>\r\n                    <Text>We use a machine learning algorithm to determine if a provided article is likely to be satire. Try it below by pasting an <TTWord label='article'>entire</TTWord> below!</Text>\r\n                </PopoverBody>\r\n            </PopoverContent>\r\n        </Popover>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Box, Button, Center, Flex, Heading, Icon, PopoverTrigger, Spacer, Stack, Text, Textarea, useColorMode } from '@chakra-ui/react'\r\nimport { QuestionOutlineIcon } from '@chakra-ui/icons'\r\nimport ExplainButton from './ExplainButton'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport { loadLayersModel } from '@tensorflow/tfjs'\r\nimport axios from 'axios'\r\n\r\nexport default function OnionConnoisseur() {\r\n    let {colorMode, toggleColorMode} = useColorMode();\r\n    const [enteredArticle, setEnteredArticle] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [result, setResult] = useState(false);\r\n    const [error, setError] = useState(false);\r\n        \r\n    const onTextFieldChange = (e) => {\r\n        setEnteredArticle(e.target.value);\r\n    }\r\n\r\n    const predict = () => {\r\n        setLoading(true);\r\n        setError(false);\r\n        setResult(false);\r\n        let formData = new FormData();\r\n        formData.append('article-body', enteredArticle);\r\n        axios.post('https://onion-connisseur.herokuapp.com/', formData).then(res => {\r\n            console.log(res.data)\r\n            setLoading(false)\r\n            setResult(res.data);\r\n        }).catch(() => {\r\n            setError(true);\r\n            setLoading(false);\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <Center>\r\n            <Stack spacing={8} align='center'>\r\n                <Flex align='center'>\r\n                    <Heading>The Onion Connoisseur</Heading>\r\n                    <Box ml={2}>\r\n                        <ExplainButton />\r\n                    </Box>\r\n                    </Flex>\r\n                <Textarea placeholder=\"Enter your article here\" w='100%' onChange={onTextFieldChange} minHeight={64}></Textarea>\r\n                {\r\n                    result ? \r\n                    <Flex justify='center'><Text>Your article has been determined as {result < 0.5 ? <Text as='span' color='green'>real</Text> : <Text as='span' color='red'>opinionated/satirical</Text>} with a score of {result}.</Text></Flex>\r\n                    : ''\r\n                }\r\n                {\r\n                    error ? \r\n                    <Flex justify='center'><Text color={colorMode === 'light' ? 'red' : 'red.400'}>An error occured while processing your request. Feel free tell me that my website is broken so that I can fix it.</Text></Flex>\r\n                    : ''\r\n                }\r\n                <Button w={'60%'} onClick={predict} isLoading={loading} loadingText=\"This will take a second!\">Is it satire?</Button>\r\n            </Stack>\r\n        </Center>\r\n    )\r\n}\r\n","import { useColorMode } from '@chakra-ui/color-mode'\r\nimport { Image } from '@chakra-ui/image'\r\nimport { Box, Flex, Heading, Stack, Text } from '@chakra-ui/layout'\r\nimport React, { forwardRef } from 'react'\r\nimport TTWord from './TTWord'\r\n\r\nfunction AboutStackInner(props, ref) {\r\n    let {colorMode, toggleColorMode} = useColorMode();\r\n    return (\r\n        <Flex\r\n        w={['100%', '80%', '70%', '60%', '50%']}\r\n        py={24}\r\n        ref = {ref}\r\n        align='center'\r\n        flexDirection='column'\r\n        >\r\n            <Stack\r\n            borderWidth={1}\r\n            borderColor={colorMode === 'light' ? 'gray.100' : 'gray.700'}\r\n            p={4}\r\n            direction='column'\r\n            align='center'\r\n            borderRadius={16}\r\n            shadow={colorMode === 'light' ? 'base' : \"14px 14px 28px #171d28, -14px -14px 28px #1d2330;\"}\r\n            spacing={12}\r\n            >\r\n                <Heading textAlign='center'>Who am I?</Heading>\r\n                <Image borderRadius='full' src={process.env.PUBLIC_URL + '/me_cropped.png'} w={[40, 48, 64]}/>\r\n                <Text textAlign='center' as='b'>\r\n                    Hello! My name is Efe Akinci.\r\n                </Text>\r\n                <Text textAlign='center' as='p'>I am currently a senior at Skyline High School, and I am planning on majoring in <TTWord label=\"and maybe also math? or perhaps dual major in cs and business? or maybe a minor in math and a dual-major in business and cs? is that even possible?\">computer science</TTWord>. I work with a research team at Michigan Medicine to apply machine learning and other computer science concepts to rare-diseases.</Text>\r\n                <Text textAlign='center' as='p'>I also really enjoy doing robotics. In 2018-2019, I was the Engineering Projects lead for FIRST Robotics Team 6429 where I developed social media apps and websites, <TTWord label=\"This is a thing in robotics where we collect data on other teams' robots to better choose teammates.\">scouting</TTWord> programs, edited videos, and more. Our team has competed in <TTWord label={<ul><li>2018 Istanbul Off-Season - Winner</li><li>2019 Istanbul Regional - Engineering Inspiration</li><li>2019 Houston World Championship</li></ul>}>many competitions</TTWord>, and is still successfully competing today. After moving to the United States, I led a team to build another scouting application for Team 3322.</Text>\r\n                <Text textAlign='center'>In addition to all of that, as you can probably tell from the entry screen, I like computer science and <TTWord label=\"seriously, what do open sets mean? where did they come from? i'm going to take topology soon and I am genuinely scared.\">math</TTWord>! I lead the computer science portion of our school's Mathmematics & Computer Science Club, and I like learning more about <TTWord label=\"i really enjoyed watching Stanford's CS 231n course recently if you're bored and looking for stuff to watch!\">computer science</TTWord> in my free time. This means I make a lot of projects as well, some of which I have documented and put up on this website.</Text>\r\n            </Stack>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nconst AboutStack = forwardRef(AboutStackInner);\r\n\r\nexport default AboutStack;\r\n","import { useColorMode } from '@chakra-ui/color-mode';\r\nimport { Box } from '@chakra-ui/layout'\r\nimport React from 'react'\r\n\r\nexport default function HomeDivider() {\r\n    const {colorMode, toggleColorMode} = useColorMode();\r\n    return (\r\n        <Box w={'100%'} borderWidth={1} borderColor={colorMode === 'light' ? 'gray.100' : 'gray.900'}></Box>\r\n    )\r\n}\r\n","import { Button } from '@chakra-ui/button'\r\nimport { Stack, Text, Heading, Box, Flex } from '@chakra-ui/layout'\r\nimport { Tooltip } from '@chakra-ui/tooltip'\r\nimport React from 'react'\r\nimport TTWord from './TTWord'\r\n\r\nexport default function IntroStack(props) {\r\n    return (\r\n        <Flex h='95vh' pt='10vh'>\r\n            <Stack w='100%' align='center' spacing={6}>\r\n                <Heading textAlign='center'>Hello!</Heading>\r\n                <Heading textAlign='center'>I love learning about computer science and <TTWord label={\"but the words \\\"open set\\\" really, really scare me.\"}>math</TTWord>!</Heading>\r\n                <Button textAlign='center' onClick={props.scrollTo}>Learn a bit about me!</Button>\r\n            </Stack>\r\n        </Flex>\r\n    )\r\n}\r\n","import { Button } from '@chakra-ui/button'\r\nimport { useColorMode } from '@chakra-ui/color-mode'\r\nimport { Image } from '@chakra-ui/image'\r\nimport { Box, Flex, Heading, Stack, Text } from '@chakra-ui/layout'\r\nimport { Collapse } from '@chakra-ui/transition'\r\nimport { useCycle } from 'framer-motion'\r\nimport React, { useState } from 'react'\r\n\r\nexport default function Project(props) {\r\n    const [open, toggleOpen] = useCycle(false, true)\r\n    let {colorMode, toggleColorMode} = useColorMode();\r\n\r\n    return (\r\n        <Box>\r\n            <Stack\r\n            borderWidth={1}\r\n            borderColor={colorMode === 'light' ? 'gray.100' : 'gray.700'}\r\n            p={4}\r\n            direction='column'\r\n            align='center'\r\n            borderRadius={16}\r\n            shadow={colorMode === 'light' ? 'base' : \"14px 14px 28px #171d28, -14px -14px 28px #1d2330;\"}\r\n            spacing={12}\r\n            variant='card'\r\n            >\r\n                <Heading textAlign='center'>{props.title}</Heading>\r\n                <Flex h={96} w='100%' justify='center' align='center'>\r\n                    {props.src ? <Image src={process.env.PUBLIC_URL + 'project_photos/' + props.src} maxH={96} borderRadius={16}/> : ''}\r\n                </Flex>\r\n                <Box w='100%'>\r\n                    <Collapse in={open} startingHeight={108}>{props.children}</Collapse>\r\n                </Box>\r\n                <Button onClick={toggleOpen}>{open ? \"Show Less\" : \"Show More\"}</Button>\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n","import { Heading, Link as OutLink, SimpleGrid, Stack, Text } from '@chakra-ui/layout'\r\nimport React from 'react'\r\nimport Project from '../projects/Project'\r\nimport { Link } from 'react-router-dom'\r\nimport { useColorMode } from '@chakra-ui/color-mode'\r\nimport { Button } from '@chakra-ui/button'\r\nimport TTWord from './TTWord'\r\n\r\nexport default function ProjectsStack() {\r\n\r\n    let { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    return (\r\n        <Stack\r\n        direction='column'\r\n        align='center'\r\n        w='100%'\r\n        pt={24}\r\n        spacing={12}\r\n        >\r\n            <Heading>Projects</Heading>\r\n            <SimpleGrid columns={[1, 1, 1, 1, 3]} gap={12}>\r\n            <Project title=\"Smart Mirror\" src='Mirror.png'>\r\n                <Text>It's a smart mirror! About a year ago, I thought it would be really cool to make my own smart mirror from scratch – <TTWord label=\"Not using libraries when you can is usually a terrible idea. Don't reinvent the wheel unless your new wheel has a measurable improvement on the wheel-making field or, as in this case, you're trying to learn how a wheel works.\">software and hardware</TTWord>. So, I decided to see if I could build the mirror for less money and with fewer tools. The answer was yes! The mirror works by using a device that outputs to a <TTWord label=\"Always try to recycle! Plus, used equipment ends up being cheaper anyway. You win, and the world wins; what more is there to want?\">recycled</TTWord> monitor behind the glass. The glass has a one-way mirror film on it to give the mirror effect. I manually cut all of the wood because I didn’t have electric tools, so some of the structure came out a bit uneven. This was my first real introduction to woodworking, and I think <TTWord label=\"okay, this is a bit of a stretch. there are screws straight into the front of the mirror. but it doesn't look bad (i think)!\">it came out good despite that</TTWord>. The software is a web page served by an Angular server and a Node.js backend. The backend also has Spotify integration. A Raspberry Pi works well as the video input, but anything that can display a webpage also works. In the end, the project helped me develop my woodworking and IOT skills, and I ended up with a pretty cool mirror.</Text>\r\n            </Project>\r\n            <Project title=\"COVID-19 Check In App\" src=\"FDS_DESIGNER_CROP.png\">\r\n                <Text>This is a cross-platform app made in <TTWord label=\"I developed my first production (robotics) app in Android Studio. It sucked. Not only did it suck, it could only suck on Android because it couldn't even run on iOS in order to suck. Cross-platform development tools are very neat and useful for rapidly developed apps, be it robotics or pandemic-response.\">Flutter</TTWord> that allows for the delivery of customized forms in health settings. The project started when I was working with a medical research team at the University of Michigan. Due to the current pandemic, the team I worked with asked me to build a COVID-19 focused application to manage appointments. I used Flutter because it provided ease of development for cross-platform applications as well as fast rendering. I first started with a quick proof-of-concept app that I then built into an app with 3 main sections — login, appointments, and check-ins. During check-ins, each answer can progress to the next question, ask another question, or switch to a different question set depending on the data from the backend. Our team has since migrated to using the <TTWord label=\"Huge props to the team at Michigan for this app. The intergration with student testing has contributed in large way to safety on campus, and the app just works.\">ResponsiBlue Health Check-In System.</TTWord></Text>\r\n            </Project>\r\n            <Project title=\"Onion Connoisseur\" src='onion_connoisseur.png'>\r\n                I created this project with my friend as our final project for SI 206 (Data-Oriented Programming) at the University of Michgian. The algorithm uses a neural network to determine wheter an article is satire or not. You can try this application out for yourself <Link to='/onion_connoisseur'><Text as='span' colo>here</Text></Link>. Additionally, you can find source code on our <Link isExternal href='https://github.com/efea-umich/SI-206-Final'>GitHub repository</Link> and more information on the project <Link isExternal href='https://github.com/efea-umich/SI-206-Final/blob/3b619acd0efdf760ac17080838d3a31ec705c600/Final_Project_Report.pdf'> on our project report</Link>.\r\n            </Project>\r\n            </SimpleGrid>\r\n            <Link to='/projects'><Button>View more projects here!</Button></Link>\r\n        </Stack>\r\n    )\r\n}\r\n","import { Stack, Text, Heading, Box, Flex } from '@chakra-ui/layout'\r\nimport { Tooltip } from '@chakra-ui/tooltip'\r\nimport React, { useRef } from 'react'\r\nimport AboutStack from './AboutStack'\r\nimport HomeDivider from './HomeDivider'\r\nimport IntroStack from './IntroStack'\r\nimport ProjectsStack from './ProjectsStack'\r\nimport TTWord from './TTWord'\r\n\r\nexport default function Home() {\r\n    let ref = useRef(null)\r\n    let scrollToElement = () => {\r\n        if (ref && ref.current) {\r\n            ref.current.scrollIntoView({behavior: 'smooth'})    \r\n        }\r\n    }\r\n    return (\r\n        <Stack w='100%' align='center' direction='column' spacing={16}>\r\n            <Stack direction='column' w={['90%']} align='center'>\r\n                <IntroStack scrollTo={scrollToElement} />\r\n                <HomeDivider/>\r\n                <AboutStack ref={ref}/>\r\n                <ProjectsStack />\r\n            </Stack>\r\n        </Stack>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerFooter,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n    DrawerContent,\r\n    DrawerCloseButton,\r\n    Button,\r\n    Text,\r\n    IconButton,\r\n    useColorMode,\r\n    Stack,\r\n    FormControl,\r\n    FormLabel,\r\n    Switch,\r\n    Box,\r\n  } from \"@chakra-ui/react\"\r\nimport { Link } from 'react-router-dom';\r\nimport { MoonIcon } from '@chakra-ui/icons';\r\n\r\nfunction NavbarLink(props) {\r\n    return (\r\n        <Box onClick={props.onClick} pb={2} borderBottomWidth={1} borderBlockEndColor='gray.100'><Link to={props.to}><Text as='b' fontSize='md' display='block'>{props.children}</Text></Link></Box>\r\n    )\r\n}\r\n\r\nexport default function MobileDrawer(props) {\r\n    let { isOpen, onClose } = props;\r\n    let { colorMode, toggleColorMode } = useColorMode();\r\n    return (\r\n        <Drawer isOpen={isOpen} onClose={onClose} placement=\"right\">\r\n            <DrawerOverlay>\r\n                <DrawerContent>\r\n                    <DrawerCloseButton onClick={onClose} />\r\n                    <DrawerHeader>Navigation Menu</DrawerHeader>\r\n\r\n                    <DrawerBody>\r\n                        <Stack direction='column' spacing={4}>\r\n                            <NavbarLink onClick={onClose} to='/'>Home</NavbarLink>\r\n                            <NavbarLink onClick={onClose} to='/projects'>Projects</NavbarLink>\r\n                            <NavbarLink onClick={onClose} to='/onion_connoisseur'>Featured App</NavbarLink>\r\n                        </Stack>\r\n                    </DrawerBody>\r\n\r\n                    <DrawerFooter>\r\n                    <FormControl display=\"flex\" alignItems=\"center\">\r\n                            <FormLabel htmlFor=\"dark-mode\" mb=\"0\">\r\n                                Enable Dark Mode \r\n                            </FormLabel>\r\n                        <Switch id=\"dark-mode\" isChecked={colorMode === 'dark'} onChange={toggleColorMode}/>\r\n                    </FormControl>\r\n\r\n                    </DrawerFooter>\r\n                </DrawerContent>\r\n                </DrawerOverlay>\r\n        </Drawer>\r\n    )\r\n}\r\n","import { useColorMode } from '@chakra-ui/color-mode'\r\nimport { Box, Flex, Stack } from '@chakra-ui/layout'\r\nimport React from 'react'\r\n\r\nexport default function NavbarContainer(props) {\r\n    const { colorMode, toggleColorMode } = useColorMode()\r\n    return (\r\n        <Flex\r\n        as='nav'\r\n        justify='center'\r\n        position='sticky'\r\n        top={0}\r\n        w='100%'\r\n        borderWidth={1}\r\n        borderColor={colorMode === 'light'? 'gray.100' : 'gray.900'}\r\n        p={4}\r\n        bg={colorMode === 'light'? 'white' : 'gray.800'}\r\n        zIndex={10}\r\n        >\r\n            <Stack\r\n            w={props.w}\r\n            direction='row'\r\n            spacing={12}\r\n            justify={props.justify}\r\n            align='center'\r\n\r\n            >\r\n            {props.children}\r\n            </Stack>\r\n        </Flex>\r\n    )\r\n}\r\n","import { IconButton } from '@chakra-ui/button'\r\nimport { useColorMode } from '@chakra-ui/color-mode'\r\nimport { useDisclosure } from '@chakra-ui/hooks'\r\nimport { HamburgerIcon } from '@chakra-ui/icons'\r\nimport React from 'react'\r\nimport MobileDrawer from './MobileDrawer'\r\nimport NavbarContainer from './NavbarContainer'\r\n\r\nexport default function MobileNavbar() {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const { colorMode, toggleColorMode} = useColorMode()\r\n    return (\r\n        <NavbarContainer justify='flex-end' w='100%'>\r\n            <IconButton onClick={onOpen}><HamburgerIcon color={colorMode === 'light' ? 'black' : 'white'}/></IconButton>\r\n            <MobileDrawer isOpen = {isOpen} onClose={onClose} />\r\n        </NavbarContainer>\r\n    )\r\n}\r\n","import { MoonIcon } from '@chakra-ui/icons'\r\nimport { Text } from '@chakra-ui/layout'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport NavbarContainer from './NavbarContainer'\r\nimport { useColorMode } from '@chakra-ui/color-mode';\r\nimport { IconButton } from '@chakra-ui/button'\r\n\r\n\r\nexport default function LargerNavbar() {\r\n    const { colorMode, toggleColorMode } = useColorMode()\r\n\r\n    return (\r\n        <NavbarContainer justify='space-evenly' w='60%'>\r\n            <Link to='/'><Text as='b' fontSize='md' display='block'>Home</Text></Link>\r\n            <Link to='/projects'><Text as='b' fontSize='md' display='block'>Projects</Text></Link>\r\n            <Link to='/onion_connoisseur'><Text as='b' fontSize='md' display='block'>Featured App</Text></Link>\r\n            <IconButton onClick={toggleColorMode} bg='transparent'><MoonIcon /></IconButton>\r\n      </NavbarContainer>\r\n    )\r\n}\r\n","import { Link } from '@chakra-ui/layout'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\nexport default function DOMLink(props) {\r\n    return (\r\n        <Link><RouterLink to={props.to}>{props.children}</RouterLink></Link>\r\n    )\r\n}\r\n","import { Heading, Stack, Text, SimpleGrid, Link } from '@chakra-ui/layout'\r\nimport { useColorMode } from '@chakra-ui/color-mode'\r\nimport React from 'react'\r\nimport Project from './Project'\r\nimport { Button } from '@chakra-ui/button'\r\nimport DOMLink from '../generic/DOMLink'\r\nimport TTWord from '../home/TTWord'\r\n\r\n\r\n\r\nexport default function Projects() {\r\n    let {colorMode, toggleColorMode} = useColorMode();\r\n    return (\r\n        <Stack w='100%' align='center' direction='column' spacing={16}>\r\n            <Stack direction='column' w={['90%']} align='center'>\r\n                <Stack\r\n                direction='column'\r\n                align='center'\r\n                w='100%'\r\n                pt={12}\r\n                spacing={12}\r\n                >\r\n                    <Heading>Projects</Heading>\r\n                    <SimpleGrid columns={[1, 1, 3, 3]} gap={12}>\r\n                        <Project title=\"Smart Mirror\" src='Mirror.png'>\r\n                            <Text>It's a smart mirror! About a year ago, I thought it would be really cool to make my own smart mirror from scratch – <TTWord label=\"Not using libraries when you can is usually a terrible idea. Don't reinvent the wheel unless your new wheel has a measurable improvement on the wheel-making field or, as in this case, you're trying to learn how a wheel works.\">software and hardware</TTWord>. So, I decided to see if I could build the mirror for less money and with fewer tools. The answer was yes! The mirror works by using a device that outputs to a <TTWord label=\"Always try to recycle! Plus, used equipment ends up being cheaper anyway. You win, and the world wins; what more is there to want?\">recycled</TTWord> monitor behind the glass. The glass has a one-way mirror film on it to give the mirror effect. I manually cut all of the wood because I didn’t have electric tools, so some of the structure came out a bit uneven. This was my first real introduction to woodworking, and I think <TTWord label=\"okay, this is a bit of a stretch. there are screws straight into the front of the mirror. but it doesn't look bad (i think)!\">it came out good despite that</TTWord>. The software is a web page served by an Angular server and a Node.js backend. The backend also has Spotify integration. A Raspberry Pi works well as the video input, but anything that can display a webpage also works. In the end, the project helped me develop my woodworking and IOT skills, and I ended up with a pretty cool mirror.</Text>\r\n                        </Project>\r\n                        <Project title=\"COVID-19 Check In App\" src=\"FDS_DESIGNER_CROP.png\">\r\n                            <Text>This is a cross-platform app made in <TTWord label=\"I developed my first production (robotics) app in Android Studio. It sucked. Not only did it suck, it could only suck on Android because it couldn't even run on iOS in order to suck. Cross-platform development tools are very neat and useful for rapidly developed apps, be it robotics or pandemic-response.\">Flutter</TTWord> that allows for the delivery of customized forms in health settings. The project started when I was working with a medical research team at the University of Michigan. Due to the current pandemic, the team I worked with asked me to build a COVID-19 focused application to manage appointments. I used Flutter because it provided ease of development for cross-platform applications as well as fast rendering. I first started with a quick proof-of-concept app that I then built into an app with 3 main sections — login, appointments, and check-ins. During check-ins, each answer can progress to the next question, ask another question, or switch to a different question set depending on the data from the backend. Our team has since migrated to using the <TTWord label=\"Huge props to the team at Michigan for this app. The intergration with student testing has contributed in large way to safety on campus, and the app just works.\">ResponsiBlue Health Check-In System.</TTWord></Text>\r\n                        </Project>\r\n                        <Project title=\"Onion Connoisseur\" src='onion_connoisseur.png'>\r\n                            I created this project with my friend as our final project for SI 206 (Data-Oriented Programming) at the University of Michgian. The algorithm uses a neural network to determine wheter an article is satire or not. You can try this application out for yourself <DOMLink to='/onion_connoisseur'><Text as='span' colo>here</Text></DOMLink>. Additionally, you can find source code on our <Link isExternal href='https://github.com/efea-umich/SI-206-Final'>GitHub repository</Link> and more information on the project <Link isExternal href='https://github.com/efea-umich/SI-206-Final/blob/3b619acd0efdf760ac17080838d3a31ec705c600/Final_Project_Report.pdf'> on our project report</Link>.\r\n                        </Project>\r\n                        <Project title=\"Team 3322 Scouting App\" src=\"3322_Scout.png\">\r\n                        This is a <TTWord label=\"Okay, I think I should explain this a little. In FIRST Robotics, if you do well enough during the qualification rounds, you get to choose your teammates for the final rounds. You obviously want to pick teammates who are going to be able to cover your weaknesses, and hence you need data. The app I made allows you to collect and view this data easily.\">scouting application</TTWord> I created during my time as scouting app lead on FRC Team 3322. I worked with two other people to create the application. The app itself is a responsive web application created in React for the frontend, Node.js for the backend, and Firebase’s Firestore for our database. The app has two main components — data entry and data viewing. The data entry allows a scouter to add a new team in a new match and enter data in sections separated by game period. The scouter can then save this data for later viewing. The data viewer uses the Chart.js framework to display data. The client can pull data for different matches and view statistics for that team. These statistics are then displayed in expandable cards that give an overview of how a team is performing. A big problem we faced was making the website responsive for different devices, and so we used the <TTWord label=\"I also really like Chakra UI (which is what this website uses). It's less grid based, but still works quite well. Give both a try!\">Material-UI</TTWord> framework’s responsive grid system for our website.\r\n                        </Project>\r\n                        <Project title=\"Salt Grinder\" src=\"Salt_Grinder.png\">\r\n                        This is one of the smaller but funnier projects I have made, mainly due to its backstory. One day, I was cooking for my parents, and we had quite a lot of meat that I needed to salt and pepper. Our family uses Costco pepper and salt grinders that take an <TTWord label=\"i get that it's fresher and whatnot, but there comes a certain point when grinding salt where you sort of understand why they sell this stuff pre-ground\">annoying amount of effort</TTWord> to get salt out of, and so by the time I was halfway through the meat, I thought to myself, “There’s got to be a better way to do this.” Then, I thought that all I was doing was spinning the base of the pepper grinder while holding it. I also had a drill, which is also a thing that spins, and I thought that I could make something out of that fact. So, I took some measurements and printed out the part in the picture. Although I did get through all of the food that day through manual effort, now, all I have to do when I want copious amounts of salt or pepper is grab a drill.\r\n                        </Project>\r\n                        <Project title=\"Team 6429 Videos\" src=\"Youtube_Logo.png\">\r\n                            During my time at Team 6429, I used Adobe Premiere to create and edit videos for our team. I have used these skills in creating a variety of videos for our projects including <Link isExternal href=\"https://www.youtube.com/watch?v=q4U0Mp3Dk9s&list=PLEpx9zcGIEUIP18TDXDtus8AN2r0G2Gzd\">educational science videos</Link>, <Link isExternal href=\"https://youtu.be/thpSaoc3FDg\">promotional videos</Link>, <Link isExternal href=\"https://youtu.be/Z_onrfRb8is\">and robot overview</Link> videos. I also created, filmed, and voiced over <Link isExternal href=\"https://youtu.be/ElL86Z0yUds\">animations</Link>.\r\n                        </Project>\r\n                    </SimpleGrid>\r\n                </Stack>\r\n            </Stack>\r\n        </Stack>\r\n    )\r\n}\r\n","import { useColorMode } from '@chakra-ui/color-mode'\r\nimport { EmailIcon } from '@chakra-ui/icons';\r\nimport { Link, Stack, Text } from '@chakra-ui/layout'\r\nimport React from 'react'\r\n\r\nexport default function Footer() {\r\n    const {colorMode, toggleColorMode} = useColorMode();\r\n    return (\r\n        <Stack\r\n        minHeight={32}\r\n        bg={colorMode === 'light' ? 'white' : 'gray.800'}\r\n        borderWidth={1}\r\n        borderColor={colorMode === 'light' ? 'gray.200' : 'gray.900'}\r\n        w='100%'\r\n        justify='center'>\r\n            <Stack\r\n            direction='column'\r\n            align='center'>\r\n                <Stack direction='row' align='center'>\r\n                    <EmailIcon color={colorMode=='light' ? 'gray.600' : 'gray.300'} />\r\n                    <Link href=\"mailto:efeakinciwork@gmail.com\" color={colorMode=='light' ? 'gray.600' : 'gray.300'} size='xs'>efeakinciwork@gmail.com</Link>\r\n                </Stack>\r\n            </Stack>\r\n        </Stack>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useLocation } from 'react-router'\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n    }, [pathname])\r\n    return (\r\n        <React.Fragment />\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom';\nimport OnionConnoisseur from './components/onion-connisseur/OnionConnoisseur';\n\nimport React, { useEffect } from 'react';\nimport { Box, Stack, Text } from '@chakra-ui/layout';\nimport Home from './components/home/Home';\n\nimport { useMediaQuery } from 'react-responsive'\nimport MobileNavbar from './components/navbar/MobileNavbar';\nimport LargerNavbar from './components/navbar/LargerNavbar';\nimport Projects from './components/projects/Projects';\nimport Footer from './components/footer/Footer';\nimport ScrollToTop from './components/generic/ScrollToTop';\n\n\n\n\nfunction App() {\n  const mobileNav = useMediaQuery({query: '(min-device-width: 48em)'})\n  return (\n    <HashRouter>\n      <ScrollToTop />\n      <Stack direction='column' spacing={'5vh'}>\n      {\n      mobileNav ? \n      <LargerNavbar w='75%' />\n      :\n      <MobileNavbar/>\n      }\n      <Box minHeight='100vh'>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/projects' component={Projects} />\n          <Route exact path='/onion_connoisseur' component={OnionConnoisseur} />\n        </Switch>\n      </Box>\n      <Footer />\n      </Stack>\n      </HashRouter>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from \"@chakra-ui/react\"\r\n\r\n\r\nconst theme = extendTheme({\r\n  config: {\r\n    initialColorMode: 'dark'\r\n  },\r\n  components: {\r\n    Link: {\r\n      baseStyle: (props) => { return {\r\n        color: props.colorMode === 'light' ? 'blue' : 'blue.200'\r\n      }}\r\n    },\r\n  }\r\n})\r\nexport default theme","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\"\nimport theme from './theme'\nimport { ThemeProvider } from '@emotion/react';\nimport smoothscroll from 'smoothscroll-polyfill'\n\n\nsmoothscroll.polyfill();\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}